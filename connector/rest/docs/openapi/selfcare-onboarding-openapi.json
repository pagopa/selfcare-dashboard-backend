{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "Onboarding API",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080",
    "description" : "Auto generated value"
  }, {
    "url" : "http://0.0.0.0:8080",
    "description" : "Auto generated value"
  } ],
  "tags" : [ {
    "name" : "Aggregates Controller"
  }, {
    "name" : "Document Controller"
  }, {
    "name" : "Onboarding"
  }, {
    "name" : "Onboarding Controller"
  }, {
    "name" : "billing-portal"
  }, {
    "name" : "internal-pnpg"
  }, {
    "name" : "internal-v1"
  }, {
    "name" : "support"
  } ],
  "paths" : {
    "/v1/aggregates/csv/{onboardingId}/products/{productId}" : {
      "get" : {
        "tags" : [ "Aggregates Controller" ],
        "summary" : "Retrieve aggregates csv for a given onboarding and product",
        "description" : "Downloads the aggregates csv associated with the specified onboarding ID and product.",
        "operationId" : "getAggregatesCsv",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/aggregates/verification/prod-io" : {
      "post" : {
        "tags" : [ "Aggregates Controller" ],
        "summary" : "Validate the data related to the aggregated entities present in a CSV file",
        "description" : "Validates aggregated entity data specific to the PROD-IO environment by processing the provided CSV file. This ensures that all entries meet the required criteria before further processing.",
        "operationId" : "verifyAppIoAggregatesCsv",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "aggregates" ],
                "type" : "object",
                "properties" : {
                  "aggregates" : {
                    "format" : "binary",
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifyAggregateResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/aggregates/verification/prod-pagopa" : {
      "post" : {
        "tags" : [ "Aggregates Controller" ],
        "summary" : "Validate the data related to the aggregated entities present in a CSV file",
        "description" : "Validates aggregated entity data specific to the PROD-Pagopa environment by processing the provided CSV file. This ensures that all entries meet the required criteria before further processing.",
        "operationId" : "verifyPagoPaAggregatesCsv",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "aggregates" ],
                "type" : "object",
                "properties" : {
                  "aggregates" : {
                    "format" : "binary",
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifyAggregateResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/aggregates/verification/prod-pn" : {
      "post" : {
        "tags" : [ "Aggregates Controller" ],
        "summary" : "Validate the data related to the aggregated entities present in a CSV file",
        "description" : "Validates aggregated entity data specific to the PROD-PN environment by processing the provided CSV file. This ensures that all entries meet the required criteria before further processing.",
        "operationId" : "verifySendAggregatesCsv",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "aggregates" ],
                "type" : "object",
                "properties" : {
                  "aggregates" : {
                    "format" : "binary",
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifyAggregateResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/documents" : {
      "get" : {
        "tags" : [ "internal-v1" ],
        "summary" : "Retrieves the list of files on the azure storage on the given path",
        "description" : "Fetches a list of files associated with the specified path on the storage.",
        "operationId" : "getFiles",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/documents/{path}" : {
      "get" : {
        "tags" : [ "internal-v1" ],
        "summary" : "Retrieves the list of files on the azure storage on the given path",
        "description" : "Fetches a list of files associated with the specified path on the storage.",
        "operationId" : "getFilesFromPath",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding" : {
      "get" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Retrieve paged onboardings with optional filters and sorting.",
        "description" : "The API retrieves paged onboarding using optional filter, order by descending creation date",
        "operationId" : "getOnboardingWithFilter",
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "institutionId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "onboardingId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "default" : "0",
            "type" : "integer"
          }
        }, {
          "name" : "productId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "default" : "20",
            "type" : "integer"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subunitCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taxCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingGetResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Default onboarding for GSP/SA/AS institutions, saves user data, and triggers async onboarding activities.",
        "description" : "Perform default onboarding request, it is used for GSP/SA/AS institution type.Users data will be saved on personal data vault if it doesn't already exist.At the end, function triggers async activities related to onboarding based on institution type.",
        "operationId" : "onboarding",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingDefaultRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/aggregation/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Asynchronously complete aggregated onboarding to COMPLETED status.",
        "description" : "Perform onboarding aggregation as /onboarding but completing the onboarding request to COMPLETED phase. The operation will be performed async due to the possible amount of time the process could take.",
        "operationId" : "onboardingAggregationCompletion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingDefaultRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/aggregation/import" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Asynchronously import aggregated onboarding to COMPLETED status and create token",
        "description" : "Perform a manual onboarding with aggregator, create token and set onboarding status to COMPLETED phase.",
        "operationId" : "onboardingAggregationImport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingAggregationImportRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/aggregation/increment" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Perform Increment for aggregates",
        "description" : "Perform the increment of the aggregates for an aggregator entity that has already completed the initial onboarding.The API initiates the onboarding process for the aggregated entities received as input.",
        "operationId" : "onboardingAggregationIncrement",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPaRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/check-manager" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Check if new manager matches the current manager.",
        "description" : "In the addition administrator flow, it checks if the new manager is equal from old one, returning true ",
        "operationId" : "checkManager",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingUserRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckManagerResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/checkRecipientCode" : {
      "get" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Validate recipientCode.",
        "description" : "check if recipientCode is valid or not",
        "operationId" : "checkRecipientCode",
        "parameters" : [ {
          "name" : "originId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recipientCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientCodeStatus"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ],
        "x-legacy-api" : "true"
      }
    },
    "/v1/onboarding/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-v1" ],
        "summary" : "Complete onboarding request and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingCompletion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingDefaultRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponseV1"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/institutionOnboardings" : {
      "get" : {
        "tags" : [ "support", "internal-v1", "Onboarding" ],
        "summary" : "Get onboardings by institution taxCode, subunitCode, origin, or originId.",
        "description" : "Returns onboardings record by institution taxCode/subunitCode/origin/originId",
        "operationId" : "onboardingInstitutionUsingGET",
        "parameters" : [ {
          "name" : "origin",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "originId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/OnboardingStatus"
          }
        }, {
          "name" : "subunitCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taxCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OnboardingResponseV1"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ],
        "x-legacy-api" : "true"
      }
    },
    "/v1/onboarding/pa" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Onboarding for PA institutions with billing.recipientCode, saves user data, creates contracts, and sends emails.",
        "description" : "Perform onboarding request for PA institution type, it require billing.recipientCode in addition to default requestUsers data will be saved on personal data vault if it doesn't already exist.At the end, function triggers async activities related to onboarding that consist of create contract and sending mail to institution's digital address.",
        "operationId" : "onboardingPa",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPaRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/pa/aggregation" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Aggregated onboarding for PA institutions, saves user data, creates contracts, and sends emails.",
        "description" : "Perform onboarding aggregation request for PA institution type, it require billing.recipientCode in addition to default requestUsers data will be saved on personal data vault if it doesn't already exist.At the end, function triggers async activities related to onboarding aggregation that consist of create contract and sending mail to institution's digital address.",
        "operationId" : "onboardingPaAggregation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPaRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/pa/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-v1" ],
        "summary" : "Complete PA onboarding request and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/pa but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPaCompletion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPaRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponseV1"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/pa/import" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Import PA onboarding with token creation and complete to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/pa but create token and completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPaImport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingImportRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/pg/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-pnpg" ],
        "summary" : "Complete PG onboarding request on PNPG domain and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/psp but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPgCompletion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPgRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponseV1"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/psp" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Onboarding for PSP institutions, saves user data, and requests admin approval via email.",
        "description" : "Perform onboarding request for PSP institution type.Users data will be saved on personal data vault if it doesn't already exist.At the end, function triggers async activities related to onboarding that consist of sending mail to Selfcare admin for approve request.",
        "operationId" : "onboardingPsp",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPspRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/psp/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-v1" ],
        "summary" : "Complete PSP onboarding request and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/psp but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPspCompletion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPspRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponseV1"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/psp/import" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Import PSP onboarding with token creation and complete to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/psp but create token and completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPspImport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingImportPspRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/users" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Onboard users for all institution types, save user data, and trigger async onboarding activities.",
        "description" : "Perform onboarding users request, it is used all institution types.Users data will be saved on personal data vault if it doesn't already exist.At the end, function triggers async activities related to onboarding based on institution type.",
        "operationId" : "onboardingUsers",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingUserRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/users/aggregator" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Onboard users for aggregators, save user data, and trigger async onboarding activities.",
        "description" : "Perform onboarding users request, it is used for aggregators.Users data will be saved on personal data vault if it doesn't already exist.At the end, function triggers async activities related to onboarding based on institution type.",
        "operationId" : "onboardingUsersAggregator",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingUserRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/users/pg" : {
      "post" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Add Manager of PG institution",
        "description" : "Create new onboarding request to add new Manager and replace the old inactive Managers of the institution.",
        "operationId" : "onboardingUsersPg",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingUserPgRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/verify" : {
      "head" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Check if product is already onboarded for the institution.",
        "description" : "Verify if the onboarded product is already onboarded for the institution",
        "operationId" : "verifyOnboardingInfoByFilters",
        "parameters" : [ {
          "name" : "origin",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "originId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subunitCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taxCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}" : {
      "get" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Get onboarding record by ID.",
        "description" : "Retrieve an onboarding record given its ID",
        "operationId" : "getById",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingGet"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/approve" : {
      "put" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Approve onboarding request and trigger async activities.",
        "description" : "Perform approve operation of an onboarding request receiving onboarding id.Function triggers async activities related to onboarding based on institution type or completing onboarding.",
        "operationId" : "approve",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/complete" : {
      "put" : {
        "tags" : [ "internal-v1" ],
        "summary" : "Complete onboarding by verifying and uploading contract, then trigger async activities.",
        "description" : "Perform complete operation of an onboarding request receiving onboarding id and contract signed by the institution.It checks the contract's signature and upload the contract on an azure storageAt the end, function triggers async activities related to complete onboarding that consist of create the institution, activate the onboarding and sending data to notification queue.",
        "operationId" : "completeOnboardingUsingPUT",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "contract" ],
                "type" : "object",
                "properties" : {
                  "contract" : {
                    "format" : "binary",
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/completeOnboardingUsers" : {
      "put" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Complete user onboarding by verifying and uploading contract, then trigger async activities.",
        "description" : "Perform complete operation of an user onboarding request receiving onboarding id and contract signed by the institution.It checks the contract's signature and upload the contract on an azure storageAt the end, function triggers async activities related to complete onboarding that consist of create the institution, activate the onboarding and sending data to notification queue.",
        "operationId" : "completeOnboardingUser",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "contract" ],
                "type" : "object",
                "properties" : {
                  "contract" : {
                    "format" : "binary",
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ],
        "x-legacy-api" : "true"
      }
    },
    "/v1/onboarding/{onboardingId}/consume" : {
      "put" : {
        "tags" : [ "support", "internal-v1", "Onboarding" ],
        "summary" : "Complete onboarding without verifying contract signature.",
        "description" : "Perform complete operation of an onboarding request as /complete but without signature verification of the contract",
        "operationId" : "completeOnboardingTokenConsume",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "contract" ],
                "type" : "object",
                "properties" : {
                  "contract" : {
                    "format" : "binary",
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/pending" : {
      "get" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Get pending onboarding by ID.",
        "description" : "Returns an onboarding record by its ID only if its status is PENDING. This feature is crucial for ensuring that the onboarding process can be completed only when the onboarding status is appropriately set to PENDING.",
        "operationId" : "getOnboardingPending",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingGet"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/recipient-code" : {
      "put" : {
        "tags" : [ "billing-portal", "Onboarding" ],
        "summary" : "Update recipient code",
        "description" : "Update recipient code receiving onboarding id.",
        "operationId" : "updateOnboardingRecipientIdUsingPUT",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recipientCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/reject" : {
      "put" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Perform reject operation of an onboarding request",
        "description" : "Perform reject operation of an onboarding request receiving onboarding id.Function change status to REJECT for an onboarding request that is not COMPLETED. ",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReasonRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/update" : {
      "put" : {
        "tags" : [ "support", "Onboarding" ],
        "summary" : "Update onboarding request with new values.",
        "description" : "Update onboarding request receiving onboarding id.Function can change some values.",
        "operationId" : "updateOnboardiUsingPUT",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/OnboardingStatus"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingDefaultRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/onboarding/{onboardingId}/withUserInfo" : {
      "get" : {
        "tags" : [ "Onboarding Controller" ],
        "summary" : "Get onboarding record by ID with user sensitive info.",
        "description" : "Retrieve an onboarding record given its ID adding to user sensitive information",
        "operationId" : "getByIdWithUserInfo",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingGet"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ],
        "x-legacy-api" : "true"
      }
    },
    "/v1/tokens" : {
      "get" : {
        "tags" : [ "Token Controller" ],
        "summary" : "Retrieves the token for a given onboarding",
        "description" : "Fetches a list of tokens associated with the specified onboarding ID.",
        "operationId" : "getToken",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TokenResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/tokens/contract-report" : {
      "get" : {
        "tags" : [ "internal-v1" ],
        "summary" : "Check if contract signed is a CADES file",
        "description" : "Check if contract signed is a CADES file even if is not .p7m",
        "operationId" : "reportContractSigned",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractSignedReport"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/tokens/contract-signed" : {
      "put" : {
        "tags" : [ "internal-v1" ],
        "summary" : "Find an attachment for a given onboarding id and update the contract signed path",
        "description" : "Find  an attachment for a given onboarding id and update the contract signed path",
        "operationId" : "updateContractSigned",
        "parameters" : [ {
          "name" : "contractSigned",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "onboardingId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "format" : "int64",
                  "type" : "integer"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/tokens/{onboardingId}/attachment" : {
      "get" : {
        "tags" : [ "Token Controller" ],
        "summary" : "Retrieve attachment for a given onboarding and filename",
        "description" : "Downloads the attachment file associated with the specified onboarding ID and filename.",
        "operationId" : "getAttachment",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v1/tokens/{onboardingId}/contract" : {
      "get" : {
        "tags" : [ "Token Controller" ],
        "summary" : "Retrieve contract not signed for a given onboarding",
        "description" : "Downloads the unsigned contract file associated with the specified onboarding ID.",
        "operationId" : "getContract",
        "parameters" : [ {
          "name" : "onboardingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v2/onboarding/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-v1" ],
        "summary" : "Complete onboarding request and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingCompletionV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingDefaultRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v2/onboarding/institutionOnboardings" : {
      "get" : {
        "tags" : [ "support", "internal-v1", "Onboarding" ],
        "summary" : "Get onboardings by institution taxCode, subunitCode, origin, or originId.",
        "description" : "Returns onboardings record by institution taxCode/subunitCode/origin/originId",
        "operationId" : "onboardingInstitutionUsingGETV2",
        "parameters" : [ {
          "name" : "origin",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "originId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/OnboardingStatus"
          }
        }, {
          "name" : "subunitCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taxCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OnboardingResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ],
        "x-legacy-api" : "true"
      }
    },
    "/v2/onboarding/pa/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-v1" ],
        "summary" : "Complete PA onboarding request and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/pa but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPaCompletionV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPaRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v2/onboarding/pg/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-pnpg" ],
        "summary" : "Complete PG onboarding request on PNPG domain and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/psp but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPgCompletionV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPgRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    },
    "/v2/onboarding/psp/completion" : {
      "post" : {
        "tags" : [ "Onboarding Controller", "internal-v1" ],
        "summary" : "Complete PSP onboarding request and set status to COMPLETED.",
        "description" : "Perform onboarding as /onboarding/psp but completing the onboarding request to COMPLETED phase.",
        "operationId" : "onboardingPspCompletionV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingPspRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "security" : [ {
          "SecurityScheme" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "AdditionalInformationsDto" : {
        "type" : "object",
        "properties" : {
          "belongRegulatedMarket" : {
            "type" : "boolean"
          },
          "regulatedMarketNote" : {
            "type" : "string"
          },
          "ipa" : {
            "type" : "boolean"
          },
          "ipaCode" : {
            "type" : "string"
          },
          "establishedByRegulatoryProvision" : {
            "type" : "boolean"
          },
          "establishedByRegulatoryProvisionNote" : {
            "type" : "string"
          },
          "agentOfPublicService" : {
            "type" : "boolean"
          },
          "agentOfPublicServiceNote" : {
            "type" : "string"
          },
          "otherNote" : {
            "type" : "string"
          }
        }
      },
      "Aggregate" : {
        "type" : "object",
        "properties" : {
          "subunitCode" : {
            "type" : "string"
          },
          "subunitType" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "parentDescription" : {
            "type" : "string"
          },
          "recipientCode" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AggregateUser"
            }
          },
          "digitalAddress" : {
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "vatNumber" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "county" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "originId" : {
            "type" : "string"
          },
          "origin" : {
            "type" : "string"
          },
          "taxCodePT" : {
            "type" : "string"
          },
          "iban" : {
            "type" : "string"
          },
          "service" : {
            "type" : "string"
          },
          "syncAsyncMode" : {
            "type" : "string"
          },
          "rowNumber" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "AggregateInstitutionRequest" : {
        "required" : [ "taxCode", "description" ],
        "type" : "object",
        "properties" : {
          "taxCode" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "subunitCode" : {
            "type" : "string"
          },
          "subunitType" : {
            "type" : "string"
          },
          "vatNumber" : {
            "type" : "string"
          },
          "parentDescription" : {
            "type" : "string"
          },
          "geographicTaxonomies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GeographicTaxonomy"
            }
          },
          "address" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "originId" : {
            "type" : "string"
          },
          "origin" : {
            "$ref" : "#/components/schemas/Origin"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "recipientCode" : {
            "type" : "string"
          },
          "digitalAddress" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "county" : {
            "type" : "string"
          },
          "taxCodePT" : {
            "type" : "string"
          },
          "iban" : {
            "type" : "string"
          },
          "service" : {
            "type" : "string"
          },
          "syncAsyncMode" : {
            "type" : "string"
          }
        }
      },
      "AggregateUser" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "role" : {
            "type" : "string"
          }
        }
      },
      "BillingPaRequest" : {
        "type" : "object",
        "properties" : {
          "vatNumber" : {
            "type" : "string"
          },
          "recipientCode" : {
            "type" : "string"
          },
          "publicServices" : {
            "type" : "boolean"
          },
          "taxCodeInvoicing" : {
            "type" : "string"
          }
        }
      },
      "BillingRequest" : {
        "type" : "object",
        "properties" : {
          "vatNumber" : {
            "type" : "string"
          },
          "recipientCode" : {
            "type" : "string"
          },
          "publicServices" : {
            "type" : "boolean"
          }
        }
      },
      "BillingResponse" : {
        "type" : "object",
        "properties" : {
          "vatNumber" : {
            "type" : "string"
          },
          "recipientCode" : {
            "type" : "string"
          },
          "publicServices" : {
            "type" : "boolean"
          }
        }
      },
      "CheckManagerResponse" : {
        "type" : "object",
        "properties" : {
          "response" : {
            "type" : "boolean"
          }
        }
      },
      "ContractSignedReport" : {
        "type" : "object",
        "properties" : {
          "cades" : {
            "type" : "boolean"
          }
        }
      },
      "DataProtectionOfficerRequest" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "pec" : {
            "type" : "string"
          }
        }
      },
      "GPUData" : {
        "type" : "object",
        "properties" : {
          "businessRegisterNumber" : {
            "type" : "string"
          },
          "legalRegisterNumber" : {
            "type" : "string"
          },
          "legalRegisterName" : {
            "type" : "string"
          },
          "longTermPayments" : {
            "type" : "boolean"
          },
          "manager" : {
            "type" : "boolean"
          },
          "managerAuthorized" : {
            "type" : "boolean"
          },
          "managerEligible" : {
            "type" : "boolean"
          },
          "managerProsecution" : {
            "type" : "boolean"
          },
          "institutionCourtMeasures" : {
            "type" : "boolean"
          }
        }
      },
      "GeographicTaxonomy" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "desc" : {
            "type" : "string"
          }
        }
      },
      "GeographicTaxonomyDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "desc" : {
            "type" : "string"
          }
        }
      },
      "InstitutionBaseRequest" : {
        "required" : [ "institutionType", "digitalAddress" ],
        "type" : "object",
        "properties" : {
          "institutionType" : {
            "$ref" : "#/components/schemas/InstitutionType"
          },
          "taxCode" : {
            "type" : "string"
          },
          "subunitCode" : {
            "type" : "string"
          },
          "subunitType" : {
            "$ref" : "#/components/schemas/InstitutionPaSubunitType"
          },
          "origin" : {
            "$ref" : "#/components/schemas/Origin"
          },
          "originId" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "county" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "digitalAddress" : {
            "minLength" : 1,
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "geographicTaxonomies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GeographicTaxonomyDto"
            }
          },
          "rea" : {
            "type" : "string"
          },
          "shareCapital" : {
            "type" : "string"
          },
          "businessRegisterPlace" : {
            "type" : "string"
          },
          "supportEmail" : {
            "type" : "string"
          },
          "supportPhone" : {
            "type" : "string"
          },
          "imported" : {
            "type" : "boolean"
          }
        }
      },
      "InstitutionImportRequest" : {
        "required" : [ "taxCode" ],
        "type" : "object",
        "properties" : {
          "institutionType" : {
            "$ref" : "#/components/schemas/InstitutionType"
          },
          "taxCode" : {
            "minLength" : 1,
            "type" : "string"
          },
          "subunitCode" : {
            "type" : "string"
          },
          "subunitType" : {
            "$ref" : "#/components/schemas/InstitutionPaSubunitType"
          },
          "origin" : {
            "$ref" : "#/components/schemas/Origin"
          },
          "city" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "county" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "digitalAddress" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "geographicTaxonomies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GeographicTaxonomyDto"
            }
          },
          "rea" : {
            "type" : "string"
          },
          "shareCapital" : {
            "type" : "string"
          },
          "businessRegisterPlace" : {
            "type" : "string"
          },
          "supportEmail" : {
            "type" : "string"
          },
          "supportPhone" : {
            "type" : "string"
          },
          "imported" : {
            "type" : "boolean"
          }
        }
      },
      "InstitutionPaSubunitType" : {
        "enum" : [ "AOO", "UO", "EC" ],
        "type" : "string"
      },
      "InstitutionPspRequest" : {
        "required" : [ "institutionType", "digitalAddress", "paymentServiceProvider" ],
        "type" : "object",
        "properties" : {
          "institutionType" : {
            "$ref" : "#/components/schemas/InstitutionType"
          },
          "taxCode" : {
            "type" : "string"
          },
          "subunitCode" : {
            "type" : "string"
          },
          "subunitType" : {
            "$ref" : "#/components/schemas/InstitutionPaSubunitType"
          },
          "origin" : {
            "$ref" : "#/components/schemas/Origin"
          },
          "originId" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "county" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "digitalAddress" : {
            "minLength" : 1,
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "geographicTaxonomies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GeographicTaxonomyDto"
            }
          },
          "rea" : {
            "type" : "string"
          },
          "shareCapital" : {
            "type" : "string"
          },
          "businessRegisterPlace" : {
            "type" : "string"
          },
          "supportEmail" : {
            "type" : "string"
          },
          "supportPhone" : {
            "type" : "string"
          },
          "imported" : {
            "type" : "boolean"
          },
          "paymentServiceProvider" : {
            "$ref" : "#/components/schemas/PaymentServiceProviderRequest"
          },
          "dataProtectionOfficer" : {
            "$ref" : "#/components/schemas/DataProtectionOfficerRequest"
          }
        }
      },
      "InstitutionResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "institutionType" : {
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "taxCodeInvoicing" : {
            "type" : "string"
          },
          "subunitCode" : {
            "type" : "string"
          },
          "subunitType" : {
            "$ref" : "#/components/schemas/InstitutionPaSubunitType"
          },
          "origin" : {
            "$ref" : "#/components/schemas/Origin"
          },
          "originId" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "county" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "digitalAddress" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "parentDescription" : {
            "type" : "string"
          },
          "geographicTaxonomies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GeographicTaxonomyDto"
            }
          },
          "rea" : {
            "type" : "string"
          },
          "shareCapital" : {
            "type" : "string"
          },
          "businessRegisterPlace" : {
            "type" : "string"
          },
          "supportEmail" : {
            "type" : "string"
          },
          "supportPhone" : {
            "type" : "string"
          },
          "paymentServiceProvider" : {
            "$ref" : "#/components/schemas/PaymentServiceProviderRequest"
          },
          "dataProtectionOfficer" : {
            "$ref" : "#/components/schemas/DataProtectionOfficerRequest"
          }
        }
      },
      "InstitutionType" : {
        "enum" : [ "PA", "PG", "GSP", "SA", "PT", "SCP", "PSP", "AS", "REC", "CON", "PRV", "GPU" ],
        "type" : "string"
      },
      "LocalDateTime" : {
        "format" : "date-time",
        "type" : "string",
        "example" : "2022-03-10T12:15:50"
      },
      "OnboardingAggregationImportRequest" : {
        "required" : [ "productId", "users", "institution" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "aggregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AggregateInstitutionRequest"
            }
          },
          "isAggregator" : {
            "type" : "boolean"
          },
          "pricingPlan" : {
            "type" : "string"
          },
          "signContract" : {
            "type" : "boolean"
          },
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionBaseRequest"
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingRequest"
          },
          "additionalInformations" : {
            "$ref" : "#/components/schemas/AdditionalInformationsDto"
          },
          "gpuData" : {
            "$ref" : "#/components/schemas/GPUData"
          },
          "onboardingImportContract" : {
            "$ref" : "#/components/schemas/OnboardingImportContract"
          }
        }
      },
      "OnboardingDefaultRequest" : {
        "required" : [ "productId", "users", "institution" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "aggregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AggregateInstitutionRequest"
            }
          },
          "isAggregator" : {
            "type" : "boolean"
          },
          "pricingPlan" : {
            "type" : "string"
          },
          "signContract" : {
            "type" : "boolean"
          },
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionBaseRequest"
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingRequest"
          },
          "additionalInformations" : {
            "$ref" : "#/components/schemas/AdditionalInformationsDto"
          },
          "gpuData" : {
            "$ref" : "#/components/schemas/GPUData"
          }
        }
      },
      "OnboardingGet" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "productId" : {
            "type" : "string"
          },
          "workflowType" : {
            "type" : "string"
          },
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionResponse"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserResponse"
            }
          },
          "pricingPlan" : {
            "type" : "string"
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingResponse"
          },
          "signContract" : {
            "type" : "boolean"
          },
          "additionalInformations" : {
            "$ref" : "#/components/schemas/AdditionalInformationsDto"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "updatedAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "expiringDate" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "status" : {
            "type" : "string"
          },
          "userRequestUid" : {
            "type" : "string"
          },
          "reasonForReject" : {
            "type" : "string"
          },
          "attachments" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "OnboardingGetResponse" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "format" : "int64",
            "type" : "integer"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OnboardingGet"
            }
          }
        }
      },
      "OnboardingImportContract" : {
        "required" : [ "filePath", "createdAt" ],
        "type" : "object",
        "properties" : {
          "fileName" : {
            "type" : "string"
          },
          "filePath" : {
            "minLength" : 1,
            "type" : "string"
          },
          "contractType" : {
            "type" : "string"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "activatedAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }
      },
      "OnboardingImportPspRequest" : {
        "required" : [ "institution", "productId", "contractImported" ],
        "type" : "object",
        "properties" : {
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionPspRequest"
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingRequest"
          },
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "contractImported" : {
            "$ref" : "#/components/schemas/OnboardingImportContract"
          }
        }
      },
      "OnboardingImportRequest" : {
        "required" : [ "institution", "productId", "users", "contractImported" ],
        "type" : "object",
        "properties" : {
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionImportRequest"
          },
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "contractImported" : {
            "$ref" : "#/components/schemas/OnboardingImportContract"
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingPaRequest"
          },
          "forceImport" : {
            "type" : "boolean"
          }
        }
      },
      "OnboardingPaRequest" : {
        "required" : [ "productId", "users", "institution" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "aggregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AggregateInstitutionRequest"
            }
          },
          "isAggregator" : {
            "type" : "boolean"
          },
          "pricingPlan" : {
            "type" : "string"
          },
          "signContract" : {
            "type" : "boolean"
          },
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionBaseRequest"
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingPaRequest"
          },
          "additionalInformations" : {
            "$ref" : "#/components/schemas/AdditionalInformationsDto"
          }
        }
      },
      "OnboardingPgRequest" : {
        "required" : [ "productId", "users", "taxCode", "origin", "digitalAddress" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "institutionType" : {
            "$ref" : "#/components/schemas/InstitutionType"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "taxCode" : {
            "type" : "string"
          },
          "businessName" : {
            "type" : "string"
          },
          "origin" : {
            "$ref" : "#/components/schemas/Origin"
          },
          "digitalAddress" : {
            "type" : "string"
          }
        }
      },
      "OnboardingPspRequest" : {
        "required" : [ "productId", "users", "institution" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "aggregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AggregateInstitutionRequest"
            }
          },
          "isAggregator" : {
            "type" : "boolean"
          },
          "pricingPlan" : {
            "type" : "string"
          },
          "signContract" : {
            "type" : "boolean"
          },
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionPspRequest"
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingRequest"
          }
        }
      },
      "OnboardingResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "productId" : {
            "type" : "string"
          },
          "workflowType" : {
            "type" : "string"
          },
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionResponse"
          },
          "pricingPlan" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserOnboardingResponse"
            }
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingResponse"
          },
          "status" : {
            "type" : "string"
          },
          "additionalInformations" : {
            "$ref" : "#/components/schemas/AdditionalInformationsDto"
          },
          "userRequestUid" : {
            "type" : "string"
          },
          "isAggregator" : {
            "type" : "boolean"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "updatedAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }
      },
      "OnboardingResponseV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "productId" : {
            "type" : "string"
          },
          "workflowType" : {
            "type" : "string"
          },
          "institution" : {
            "$ref" : "#/components/schemas/InstitutionResponse"
          },
          "pricingPlan" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserOnboardingResponseV1"
            }
          },
          "billing" : {
            "$ref" : "#/components/schemas/BillingResponse"
          },
          "status" : {
            "type" : "string"
          },
          "additionalInformations" : {
            "$ref" : "#/components/schemas/AdditionalInformationsDto"
          },
          "userRequestUid" : {
            "type" : "string"
          },
          "isAggregator" : {
            "type" : "boolean"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "updatedAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }
      },
      "OnboardingStatus" : {
        "enum" : [ "REQUEST", "TOBEVALIDATED", "PENDING", "COMPLETED", "FAILED", "REJECTED", "DELETED" ],
        "type" : "string"
      },
      "OnboardingUserPgRequest" : {
        "required" : [ "productId", "users", "taxCode", "origin" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "institutionType" : {
            "$ref" : "#/components/schemas/InstitutionType"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          },
          "taxCode" : {
            "type" : "string"
          },
          "origin" : {
            "$ref" : "#/components/schemas/Origin"
          }
        }
      },
      "OnboardingUserRequest" : {
        "required" : [ "productId", "users" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "minLength" : 1,
            "type" : "string"
          },
          "institutionType" : {
            "$ref" : "#/components/schemas/InstitutionType"
          },
          "subunitCode" : {
            "type" : "string"
          },
          "origin" : {
            "type" : "string"
          },
          "originId" : {
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "users" : {
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRequest"
            }
          }
        }
      },
      "Origin" : {
        "enum" : [ "MOCK", "IPA", "SELC", "ANAC", "UNKNOWN", "ADE", "INFOCAMERE", "IVASS", "PDND_INFOCAMERE" ],
        "type" : "string"
      },
      "PartyRole" : {
        "enum" : [ "MANAGER", "DELEGATE", "SUB_DELEGATE", "OPERATOR", "ADMIN_EA", "ADMIN_EA_IO" ],
        "type" : "string"
      },
      "PartyRoleV1" : {
        "enum" : [ "MANAGER", "DELEGATE", "SUB_DELEGATE", "OPERATOR", "ADMIN_EA" ],
        "type" : "string"
      },
      "PaymentServiceProviderRequest" : {
        "type" : "object",
        "properties" : {
          "businessRegisterNumber" : {
            "type" : "string"
          },
          "legalRegisterNumber" : {
            "type" : "string"
          },
          "legalRegisterName" : {
            "type" : "string"
          },
          "longTermPayments" : {
            "type" : "boolean"
          },
          "abiCode" : {
            "type" : "string"
          },
          "vatNumberGroup" : {
            "type" : "boolean"
          },
          "providerNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "contractType" : {
            "type" : "string"
          },
          "contractId" : {
            "type" : "string"
          }
        }
      },
      "ReasonRequest" : {
        "type" : "object",
        "properties" : {
          "reasonForReject" : {
            "type" : "string"
          }
        }
      },
      "RecipientCodeStatus" : {
        "enum" : [ "DENIED_NO_BILLING", "DENIED_NO_ASSOCIATION", "ACCEPTED" ],
        "type" : "string"
      },
      "RowError" : {
        "required" : [ "row" ],
        "type" : "object",
        "properties" : {
          "row" : {
            "format" : "int32",
            "type" : "integer"
          },
          "cf" : {
            "type" : "string"
          },
          "reason" : {
            "type" : "string"
          }
        }
      },
      "TokenResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/TokenType"
          },
          "productId" : {
            "type" : "string"
          },
          "checksum" : {
            "type" : "string"
          },
          "contractVersion" : {
            "type" : "string"
          },
          "contractTemplate" : {
            "type" : "string"
          },
          "contractSigned" : {
            "type" : "string"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "updatedAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "closedAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "deletedAt" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }
      },
      "TokenType" : {
        "enum" : [ "INSTITUTION", "LEGALS", "USER", "ATTACHMENT" ],
        "type" : "string"
      },
      "UserOnboardingResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/PartyRole"
          },
          "productRole" : {
            "type" : "string"
          },
          "userMailUuid" : {
            "type" : "string"
          }
        }
      },
      "UserOnboardingResponseV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/PartyRoleV1"
          },
          "productRole" : {
            "type" : "string"
          },
          "userMailUuid" : {
            "type" : "string"
          }
        }
      },
      "UserRequest" : {
        "type" : "object",
        "properties" : {
          "taxCode" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/PartyRole"
          }
        }
      },
      "UserResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/PartyRole"
          },
          "productRole" : {
            "type" : "string"
          }
        }
      },
      "VerifyAggregateResponse" : {
        "type" : "object",
        "properties" : {
          "aggregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Aggregate"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RowError"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "SecurityScheme" : {
        "type" : "http",
        "description" : "Authentication",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}